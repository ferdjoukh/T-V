  
/* derived formula from postcondition by VeriATL */
*hypothesis* var r,a1,a2
*hypothesis* REL!RELRelation.allInstances()->includes(r) 
*hypothesis* r.attrs->includes(a1)
*hypothesis* r.attrs->includes(a2) 
*hypothesis* a1 <> a2
*hypothesis* genBy(r,R2R) 
*hypothesis* r.attrs.size() > 0 
*hypothesis* genBy(a1,RA2AK) 
*hypothesis* genBy(a2,RA2AK) 

/* preconditions */
*hypothesis* ER!Entity.allInstances()->forAll(e | e.attrs->forAll(a1,a2 | a1<>a2 implies a1.name<>a2.name ));
*hypothesis* ER!Relship.allInstances()->forAll(r | r.attrs->forAll(a1,a2 | a1<>a2 implies a1.name<>a2.name ));

/* abstracted transformation semantics */
*hypothesis* REL!RELSchema.allInstances()->forAll(relschema | 
	           genBy(relschema,S2S) implies 
			     ER!ERSchema.allInstances->exists(erschema | 
			       true and relschema.name = erschema.name  ) )

*hypothesis* REL!RELRelation.allInstances()->forAll(r | 
	           genBy(r,E2R) implies 
			     ER!Entity.allInstances()->exists(s | 
			     	true and r.name = s.name and genBy(r.schema, S2S)[erschema instaniate s.schema])
					
*hypothesis* REL!RELRelation.allInstances()->forAll(r | 
	           genBy(r,R2R) implies 
			     ER!Relship.allInstances()->exists(s | 
			     	true and r.name = s.name and genBy(r.schema, S2S)[erschema instaniate s.schema])
			   
*hypothesis* REL!RELAttribute.allInstances()->forAll(a |
	           genBy(a,RA2AK) implies 
			     ER!ERAttribute.allInstances()->exists(att | 
			     	ER!RelshipEnd.allInstances()->exists(rse | 
			     	  att.entity=rse.entity and att.isKey=true and 
					    a.name = att.name and a.isKey = att.isKey and genBy(a.relation, R2R)[s instaniate rse.relship]))

/* negate the goal of S28 for finding the counter example */
*hypothesis* a1.name = a2.name


/* ignores: 
 and relschema.relations->forAll(rel | 
	s.entities->exists(entity| genBy(rel, E2R)[s instaniate entity]) or
	s.relships->exists(relship| genBy(rel, R2R)[s instaniate relship]		
 */